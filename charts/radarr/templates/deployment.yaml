apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "radarr.fullname" . }}
  {{- if .Values.deploymentAnnotations }}
  annotations:
    {{- range $key, $value := .Values.deploymentAnnotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ include "radarr.name" . }}
    helm.sh/chart: {{ include "radarr.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "radarr.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "radarr.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 7878
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          env:
            - name: TZ
              value: "{{ .Values.timezone }}"
            - name: PUID
              value: "{{ .Values.puid }}"
            - name: PGID
              value: "{{ .Values.pgid }}"
            {{- if .Values.dockerMods }}
            - name: DOCKER_MODS
              value: "{{ .Values.dockerMods }}"
            {{- end }}
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /downloads
              name: downloads
            {{- if .Values.persistence.downloads.subPath }}
              subPath: {{ .Values.persistence.downloads.subPath }}
            {{- end }}
            - mountPath: /movies
              name: movies
            {{- if .Values.persistence.movies.subPath }}
              subPath: {{ .Values.persistence.movies.subPath }}
            {{- end }}
            {{- range .Values.persistence.extraExistingClaimMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
            {{- if .subPath }}
              subPath: {{ .subPath }}
            {{- end }}
              readOnly: {{ .readOnly }}
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if .Values.exportarr.enabled }}
        - name: radarr-exporter
          image: "{{ .Values.exportarr.image.repository }}:{{ .Values.exportarr.image.tag }}"
          imagePullPolicy: {{ .Values.exportarr.image.pullPolicy }}
          command: ["exportarr"]
          args: ["radarr"]
          env:
          - name: PORT
            value: "{{ .Values.exportarr.port }}"
          - name: URL
            value: "{{ .Values.exportarr.url }}"
          - name: APIKEY
            value: "{{ .Values.exportarr.apikey }}"
          ports:
          - name: monitoring
            containerPort: {{ .Values.exportarr.port }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: monitoring
            failureThreshold: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: monitoring
            failureThreshold: 5
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 500m
              memory: 256Mi
{{- end }}
      volumes:
      - name: config
      {{- if .Values.persistence.config.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.config.existingClaim }}{{ .Values.persistence.config.existingClaim }}{{- else }}{{ template "radarr.fullname" . }}-config{{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: downloads
      {{- if .Values.persistence.downloads.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.downloads.existingClaim }}{{ .Values.persistence.downloads.existingClaim }}{{- else }}{{ template "radarr.fullname" . }}-downloads{{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: movies
      {{- if .Values.persistence.movies.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.movies.existingClaim }}{{ .Values.persistence.movies.existingClaim }}{{- else }}{{ template "radarr.fullname" . }}-movies{{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- range .Values.persistence.extraExistingClaimMounts }}
      - name: {{ .name }}
        persistentVolumeClaim:
          claimName: {{ .existingClaim }}
      {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
